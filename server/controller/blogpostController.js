import blogData from '../model/blogpostModel';
import Response from '../Helpers/response';
import axios from 'axios'
class blogController {

    static getAllBlogFromAPI =async(req,res)=> {
        try{
            const responseFromAPI=await axios.get('https://blogpost-api-shecancode.herokuapp.com/api/v1/blog/dash/all')
            return Response.successMessage(res,"fetching successfully",responseFromAPI.data,200 )

        }catch(e){
            console.log(e)
            return Response.errorMessage(res,"fetching failed",403)

        }
    }
    static createblogpost = async (req, res) => {

        let {
            title,
            content,
            userId
        } = req.body;
        
        const timestamp = new Date(Date.now());


        const data = await blogData.create(req.body);


        if (!data) {
            return Response.errorMessage(res,"blog failed to be created", 417)
           
        }
         return Response.successMessage(res, "blog created is successfull", data,201)
        

    }
    static getAllBlog = async (req, res) => {
        
        const data = await blogData.find();
       return Response.successMessage(res, "this is all blogs",data, 200)
        
    }

    static getOneBlog = async (req, res) => {
        const blogid = req.params.id;

        const data = await blogData.findById(blogid);

        if (!data) {
            return Response.errorMessage(res, "there is no  one blog", 417)
            
        }
        return Response.successMessage(res,"you have got one blogpost", data,201)
            
    }

    static deleteOneBlog = async (req, res) => {
        const blogid = req.params.id;
        const data = await blogData.findByIdAndDelete(blogid);


        if (!data) {
            return Response.errorMessage(res, "blog failed to be deleted",417)
            
        }
        return Response.successMessage(res,"deleted successfully",{data},201)
        
    }
    static updateOneBlog = async (req, res) => {
        const blogid = req.params.id;

        let {
            title,
            content
        } = req.body;


        
        const data = await blogData.findByIdAndUpdate(blogid, {
            title: title,
            content: content
        });


        if (!data) {
            return Response.errorMessage(res, "update failed",data, 417)
            
        }



        const dataUpdated= await blogData.findById(blogid)
        return Response.successMessage(res, "updated is successfully",data,200)
        
    }
}

export default blogController;
//_ID: id generated by mongo 

/*static getAllBlog =async(req,res)=>{
    const data = await blogData;
    //const data = await blogData.create(req.body);
    return res.status(200).json({
        status:200,
           message:"this is all blogs",
           data

    })
};
static getAllBlog =(req,res)=>{
    const data = blogs;
    return res.status(200).json({
        status:200,
           message:"this is all blogs",
           data

    })
};
static  getOneBlog =(req,res)=>{
    const blogid =  req.params.Id;
  const data = blogs.find(blog =>blog.data===parseInt(blogid));
  if(!data){
    return res.status(201).json({
        status:201,
        message:"this is one blogId",
        data
    })
  }

}


static deleteOneBlog =(req,res)=>{
    const blogid =  req.params.id;
  const dataIndex = blogs.findIndex(blog =>blog.blogid===parseInt(blogid));

  console.log(dataIndex);
   if(dataIndex ===-1){
       return res.status(404).json({
           status:404,
           message:"not found",

       });
   }
   const remove= blogs.splice(dataIndex,1);

  return res.status(200).json({
    status:200,
    message:"index is found",
    dataIndex

})
}
static updateOneBlog =(req,res)=>{
    const blogid = parseInt(req.params.id);
    const dataIndex = blogs.findIndex(blog =>blog.blogid===parseInt(blogid));

    console.log(dataIndex);
     if(dataIndex ===-1){
         return res.status(404).json({
             status:404,
             message:"not found",

         });
     }

let {
    title,
    content,
    timestamp,
    userId
}=req.body;
const blog = new blogData(blogid,title,content,timestamp,userId);
blogs[dataIndex]=blog;
const data = blogs.find(blog=>blog.blogid===blogid);

if(!data){
    return res.status(417).json(
        {
           status:417,
           message:"blog failed to be updated",
        }
    )
}

return res.status(200).json(
    {
        status:200,
        message:"blog updated is successfull",
        data
    })


}
}*/


